//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MultiplayerShooter/Scripts/Player/PlayerJoystick.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerJoystick: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerJoystick()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerJoystick"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""afd01bd9-106d-4caa-b7a2-672b7bab709a"",
            ""actions"": [
                {
                    ""name"": ""InputMovement"",
                    ""type"": ""Value"",
                    ""id"": ""93ef098e-3852-475f-8552-2ff77b741759"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputAim"",
                    ""type"": ""Value"",
                    ""id"": ""3773c057-167d-4cd1-b2c3-ef5b7ee5595b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d2554bb0-ecb5-4e67-8b7f-f8ba01e71f28"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6140b887-424c-44c4-aa92-c62620a544da"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_InputMovement = m_Movement.FindAction("InputMovement", throwIfNotFound: true);
        m_Movement_InputAim = m_Movement.FindAction("InputAim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_InputMovement;
    private readonly InputAction m_Movement_InputAim;
    public struct MovementActions
    {
        private @PlayerJoystick m_Wrapper;
        public MovementActions(@PlayerJoystick wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputMovement => m_Wrapper.m_Movement_InputMovement;
        public InputAction @InputAim => m_Wrapper.m_Movement_InputAim;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @InputMovement.started += instance.OnInputMovement;
            @InputMovement.performed += instance.OnInputMovement;
            @InputMovement.canceled += instance.OnInputMovement;
            @InputAim.started += instance.OnInputAim;
            @InputAim.performed += instance.OnInputAim;
            @InputAim.canceled += instance.OnInputAim;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @InputMovement.started -= instance.OnInputMovement;
            @InputMovement.performed -= instance.OnInputMovement;
            @InputMovement.canceled -= instance.OnInputMovement;
            @InputAim.started -= instance.OnInputAim;
            @InputAim.performed -= instance.OnInputAim;
            @InputAim.canceled -= instance.OnInputAim;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnInputMovement(InputAction.CallbackContext context);
        void OnInputAim(InputAction.CallbackContext context);
    }
}
